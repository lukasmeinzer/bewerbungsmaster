name: Deploy Webapp

on:
  push:
    branches:
      - Tests

jobs:
  test-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh                
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa 
        chmod 600 ~/.ssh/id_rsa       
        ssh-keyscan -H "${{ secrets.SERVER_IP }}" >> ~/.ssh/known_hosts

    - name: Add GitHub to known_hosts
      run: |
        ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts << EOF

    - name: Test SSH Connection
      run: |
        git ls-remote git@github.com:lukasmeinzer/bewerbungsmaster.git

    # - name: Pull Repository on Server
    #   run: |
    #     ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << EOF
    #       cd git_local/bewerbungsmaster
    #       git pull
    #     EOF

    - name: Build Backend Test Image
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << EOF
          cd git_local/bewerbungsmaster
          docker compose up --build backend/Dockerfile -t backend-test ./backend
        EOF

    - name: Run Tests
      run: |
        docker exec -it backend-test 
        pytest backend/tests/tests.py
        docker run --rm backend-test
        EOF


  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test-backend  # Ensure this job only runs after test-backend succeeds

    steps:
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh                
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa 
        chmod 600 ~/.ssh/id_rsa       
        ssh-keyscan -H "${{ secrets.SERVER_IP }}" >> ~/.ssh/known_hosts

    - name: Build and Run Docker Container
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << EOF
          cd git_local/bewerbungsmaster
          git pull
          docker compose down || true
          docker compose up -d --build
        EOF
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}